1. Read Your First Cup: An Introduction to the Java EE Platform — Focus on Chapter 2, “Understanding Java Platform, Enterprise Edition”

	a. Explain the tiers discussed in the article. On which does J2EE focus? On which to the Oracle database focus?
	- The client tier consists of application clients that access a Java EE server and that are usually located on a different machine from the server. The clients make requests to the server. 
	The server processes the requests and returns a response back to the client. Many different types of applications can be Java EE clients, and they are not always, or even often Java applications. 
	Clients can be a web browser, a standalone application, or other servers, and they run on a different machine from the Java EE server.

	- The web tier consists of components that handle the interaction between clients and the business tier. Its primary tasks are the following:
		- Dynamically generate content in various formats for the client
		- Collect input from users of the client interface and return appropriate results from the components in the business tier
		- Control the flow of screens or pages on the client
		- Maintain the state of data for a user's session
		- Perform some basic logic and hold some data temporarily in managed beans

	- The business tier consists of components that provide the business logic for an application. Business logic is code that provides functionality to a particular business domain, like the financial 
	industry, or an e-commerce site. In a properly designed enterprise application, the core functionality exists in the business tier components. The following Java EE technologies are among those that 
	are used in the business tier in Java EE applications:
		- Enterprise JavaBeans (enterprise bean) components
		- JAX-RS RESTful web services
		- Java Persistence API entities

	- The enterprise information systems (EIS) tier consists of database servers, enterprise resource planning systems, and other legacy data sources, like mainframes. These resources typically are located 
	on a separate machine from the Java EE server, and are accessed by components on the business tier. The following Java EE technologies are used to access the EIS tier in Java EE applications:
		- The Java Database Connectivity API (JDBC)
		- The Java Persistence API
		- The Java EE Connector Architecture
		- The Java Transaction API (JTA)

	b. Explain the nature of a J2EE container. What sort of containers are there?
		- A Java EE server is a server application that implements the Java EE platform APIs and provides standard Java EE services. Java EE servers are sometimes called application servers, because they allow you to serve application data to clients, much as web servers serve web pages to web browsers.
		Java EE servers host several application component types that correspond to the tiers in a multi-tiered application. The Java EE server provides services to these components in the form of a container.Java EE containers are the interface between the component and the lower-level functionality 
		provided by the platform to support that component. The functionality of the container is defined by the platform and is different for each component type. Nonetheless, the server allows the different component types to work together to provide functionality in an enterprise application.
		- The web container is the interface between web components and the web server. A web component can be a servlet or a JavaServer Faces Facelets page. The container manages the component's lifecycle, dispatches requests to application components, and provides interfaces to context data, such as information about the current request.
		- The EJB container is the interface between enterprise beans, which provide the business logic in a Java EE application, and the Java EE server. The EJB container runs on the Java EE server and manages the execution of an application's enterprise beans.
		- The application client container is the interface between Java EE application clients (special Java SE applications that use Java EE server components) and the Java EE server. The application client container runs on the client machine and is the gateway between the client application and the Java EE server components that the client uses.


2. Read The Java EE Tutorial — This tutorial provides extensive material on J2EE; focus on the sections listed here.

	a. Sections 1.7–1.8, “Java EE 7 APIs” — Explain the purpose of these technologies (only): JPA, JTA, JAX-RS*, JDBC, JAXB.
		- The Java Persistence API (JPA) is a Java standards–based solution for persistence. Persistence uses an object/relational mapping approach to bridge the gap between an object-oriented model and a relational database. The Java Persistence API can also be used in Java SE applications outside of the Java EE environment. 
		Java Persistence consists of the following areas:
			- The Java Persistence API
			- The query language
			- Object/relational mapping metadata
			- The Java EE 7 platform requires Java Persistence API 2.1.

		- The Java Transaction API (JTA) provides a standard interface for demarcating transactions. The Java EE architecture provides a default auto commit to handle transaction commits and rollbacks. An auto commit means that any other applications that are viewing data will see the updated data after each database read or write operation. However, 
		if your application performs two separate database access operations that depend on each other, you will want to use the JTA API to demarcate where the entire transaction, including both operations, begins, rolls back, and commits.

		- The Java API for RESTful Web Services (JAX-RS) defines APIs for the development of web services built according to the Representational State Transfer (REST) architectural style. A JAX-RS application is a web application that consists of classes packaged as a servlet in a WAR file along with required libraries.

		- The Java Database Connectivity (JDBC) API lets you invoke SQL commands from Java programming language methods. You use the JDBC API in an enterprise bean when you have a session bean access the database. You can also use the JDBC API from a servlet or a JSP page to access the database directly without going through an enterprise bean.
		The JDBC API has two parts:
			- An application-level interface used by the application components to access a database
			- A service provider interface to attach a JDBC driver to the Java EE platform

		- The Java Architecture for XML Binding (JAXB) provides a convenient way to bind an XML schema to a representation in Java language programs. JAXB can be used independently or in combination with JAX-WS, in which case it provides a standard data binding for web service messages. All Java EE application client containers, web containers, and EJB containers support the JAXB API.

	b. Section 5, “Packaging Applications” — Compare and contrast JARs, WARs & EARs.
		- In J2EE application, modules are packaged as EAR, JAR and WAR based on their functionality.
			- JAR: EJB modules which contain enterprise java beans (class files) and EJB deployment descriptor are packed as JAR files with .jar extenstion
			- WAR: Web modules which contain Servlet class files, JSP Files, supporting files, GIF and HTML files are packaged as JAR file with .war (web archive) extension
			- EAR: All above files (.jar and .war) are packaged as JAR file with .ear (enterprise archive) extension and deployed into Application Server.


3. Review these tutorials, on which the lab is based: Developing a Java EE Application & Creating and Running Your First RESTful Web Service.

	a. Identify the IDE we’ll use for J2EE development.
		- IntelliJ IDEA 2016

	b. Identify the roles of the following technologies in the J2EE application: J2SE’s JDK; GlassFish.
		- The Java Development Kit (JDK) is an implementation of either one of the Java Platform, Standard Edition; Java Platform, Enterprise Edition or Java Platform, Micro Edition platforms released by Oracle Corporation in the form of a binary product aimed at Java developers on Solaris, Linux, Mac OS X or Windows. The JDK includes a private JVM and a few other resources to finish the development of a Java Application.
		- The GlassFish community implements an open source Java EE 5 application server.  GlassFish is a robust, commercial, production quality, compatible application server that is free for development, deployment, and redistribution.

	c. Explain the nature of a RESTful webservice.*
		- RESTful web services are built to work best on the Web. Representational State Transfer (REST) is an architectural style that specifies constraints, such as the uniform interface, that if applied to a web service induce desirable properties, such as performance, scalability, and modifiability, that enable services to work best on the Web. In the REST architectural style, data and functionality are considered resources 
		and are accessed using Uniform Resource Identifiers (URIs), typically links on the Web. The resources are acted upon by using a set of simple, well-defined operations. The REST architectural style constrains an architecture to a client/server architecture and is designed to use a stateless communication protocol, typically HTTP. In the REST architecture style, clients and servers exchange representations of resources by using a standardized interface and protocol.
		The following principles encourage RESTful applications to be simple, lightweight, and fast:
			- Resource identification through URI: A RESTful web service exposes a set of resources that identify the targets of the interaction with its clients. Resources are identified by URIs, which provide a global addressing space for resource and service discovery. 
			- Uniform interface: Resources are manipulated using a fixed set of four create, read, update, delete operations: PUT, GET, POST, and DELETE. PUT creates a new resource, which can be then deleted by using DELETE. GET retrieves the current state of a resource in some representation. POST transfers a new state onto a resource. 
			- Self-descriptive messages: Resources are decoupled from their representation so that their content can be accessed in a variety of formats, such as HTML, XML, plain text, PDF, JPEG, JSON, and others. Metadata about the resource is available and used, for example, to control caching, detect transmission errors, negotiate the appropriate representation format, and perform authentication or access control.
			- Stateful interactions through hyperlinks: Every interaction with a resource is stateless; that is, request messages are self-contained. Stateful interactions are based on the concept of explicit state transfer. Several techniques exist to exchange state, such as URI rewriting, cookies, and hidden form fields. State can be embedded in response messages to point to valid future states of the interaction. 