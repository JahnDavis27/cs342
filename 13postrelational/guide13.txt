1. Read Pramod Sadalage’s NoSQL Databases: An Overview (circa 2012) and explain:

	a. the key motivations for considering non-relational database systems.
		- Application developers have been frustrated with the impedance mismatch between the relational data structures and the in-memory data structures of the application. Using NoSQL databases
		allows developers to develop without having to convert in-memory structures to relational structures. There is also movement away from using databases as integration points in favor of 
		encapsulating databases with applications and integrating using services. The rise of the web as a platform also created a vital factor change in data storage as the need to support large 
		volumes of data by running on clusters. Relational databases were not designed to run efficiently on clusters. The data storage needs of an ERP application are lot more different than the 
		data storage needs of a Facebook or an Etsy, for example. 

	b. aggregate data models.
		- An aggregate is a collection of data that we interact with as a unit. These units of data or aggregates form the boundaries for ACID operations with the database, Key-value, Document, and 
		Column-family databases can all be seen as forms of aggregate-oriented database. Aggregates make it easier for the database to manage data storage over clusters, since the unit of data now 
		could reside on any machine and when retrieved from the database gets all the related data along with it. Aggregate-oriented databases work best when most data interaction is done with the 
		same aggregate, for example when there is need to get an order and all its details, it better to store order as an aggregate object but dealing with these aggregates to get item details on 
		all the orders is not elegant. Aggregate-oriented databases make inter-aggregate relationships more difficult to handle than intra-aggregate relationships. Aggregate-ignorant databases are 
		better when interactions use data organized in many different formations. Aggregate-oriented databases often compute materialized views to provide data organized differently from their primary 
		aggregates. This is often done with map-reduce computations, such as a map-reduce job to get items sold per day.

	c. polyglot persistence.
		- Polyglot persistence is a technique that uses different data storage technologies to handle varying data storage needs. Polyglot persistence can apply across an enterprise or within a single application.

	d. the relevance of the CAP theorem.
		- In a distributed system, managing consistency(C), availability(A) and partition toleration(P) is important, Eric Brewer put forth the CAP theorem which states that in any distributed system 
		we can choose only two of consistency, availability or partition tolerance. Many NoSQL databases try to provide options where the developer has choices where they can tune the database as per 
		their needs. For example if you consider Riak a distributed key-value database. There are essentially three variables r, w, n where
			- r=number of nodes that should respond to a read request before its considered successful.
			- w=number of nodes that should respond to a write request before its considered successful.
			- n=number of nodes where the data is replicated aka replication factor.
		In a Riak cluster with 5 nodes, we can tweak the r,w,n values to make the system very consistent by setting r=5 and w=5 but now we have made the cluster susceptible to network partitions since 
		any write will not be considered successful when any node is not responding. We can make the same cluster highly available for writes or reads by setting r=1 and w=1  but now consistency can be 
		compromised since some nodes may not have the latest copy of the data. The CAP theorem states that if you get a network partition, you have to trade off availability of data versus consistency 
		of data. Durability can also be traded off against latency, particularly if you want to survive failures with replicated data.

	e. the types of NoSQL databases.
		- Key-value stores are the simplest NoSQL data stores to use from an API perspective. The client can either get the value for the key, put a value for a key, or delete a key from the data store. 
		The value is a blob that the data store just stores, without caring or knowing what's inside; it's the responsibility of the application to understand what was stored. Since key-value stores always 
		use primary-key access, they generally have great performance and can be easily scaled.

		- Documents are the main concept in document databases. The database stores and retrieves documents, which can be XML, JSON, BSON, and so on. These documents are self-describing, hierarchical tree 
		data structures which can consist of maps, collections, and scalar values. The documents stored are similar to each other but do not have to be exactly the same. Document databases store documents 
		in the value part of the key-value store; think about document databases as key-value stores where the value is examinable. Document databases such as MongoDB provide a rich query language and constructs 
		such as database, indexes etc allowing for easier transition from relational databases.

		- Column-family databases store data in column families as rows that have many columns associated with a row key (Figure 10.1). Column families are groups of related data that is often accessed together. 
		For a Customer, we would often access their Profile information at the same time, but not their Orders.Each column family can be compared to a container of rows in an RDBMS table where the key identifies 
		the row and the row consists of multiple columns. The difference is that various rows do not have to have the same columns, and columns can be added to any row at any time without having to add it to other 
		rows. When a column consists of a map of columns, then we have a super column. A super column consists of a name and a value which is a map of columns. Think of a super column as a container of columns.

		- Graph databases allow you to store entities and relationships between these entities. Entities are also known as nodes, which have properties. Think of a node as an instance of an object in the application. 
		Relations are known as edges that can have properties. Edges have directional significance; nodes are organized by relationships which allow you to find interesting patterns between the nodes. The organization 
		of the graph lets the data to be stored once and then interpreted in different ways based on relationships. Usually, when we store a graph-like structure in RDBMS, it's for a single type of relationship ("who 
		is my manager" is a common example). Adding another relationship to the mix usually means a lot of schema changes and data movement, which is not the case when we are using graph databases. Similarly, in relational 
		databases we model the graph beforehand based on the Traversal we want; if the Traversal changes, the data will have to change. In graph databases, traversing the joins or relationships is very fast. The relationship 
		between nodes is not calculated at query time but is actually persisted as a relationship. Traversing persisted relationships is faster than calculating them for every query. Nodes can have different types of relationships 
		between them, allowing you to both represent relationships between the domain entities and to have secondary relationships for things like category, path, time-trees, quad-trees for spatial indexing, or linked lists for 
		sorted access. Since there is no limit to the number and kind of relationships a node can have, they all can be represented in the same graph database. Relationships are first-class citizens in graph databases; most of the 
		value of graph databases is derived from the relationships. Relationships don't only have a type, a start node, and an end node, but can have properties of their own. Using these properties on the relationships, we can add 
		intelligence to the relationship—for example, since when did they become friends, what is the distance between the nodes, or what aspects are shared between the nodes. These properties on the relationships can be used to query the graph.

	f. when (and when not) to use NoSQL database systems.
		- We've covered a lot of the general issues you need to be aware of to make decisions in the new world of NoSQL databases. It's now time to talk about why you would choose NoSQL databases for future development work. Here 
		are some broad reasons to consider the use of NoSQL databases.
			- To improve programmer productivity by using a database that better matches an application's needs.
			- To improve data access performance via some combination of handling larger data volumes, reducing latency, and improving throughput.
			- It's essential to test your expectations about programmer productivity and/or performance before committing to using a NoSQL technology. Since most of the NoSQL databases are open source, testing them is a simple matter 
			of downloading these products and setting up a test environment.
		Even if NoSQL cannot be used as of now, designing the system using service encapsulation supports changing data storage technologies as needs and technology evolve. Separating parts of applications into services also allows 
		you to introduce NoSQL into an existing application.

An alternate source of this basic information is Martin Fowler’s Introduction to NoSQL video.

2. Use “Getting Started with the Key/Value API”, Chapters 3–5, from the Oracle NoSQL Database documentation as a reference. Be sure to know how to:

	a. Compare and contrast Major and minor key components.

	b. Use the appropriate commands to write and retrieve records.

Be sure that you can compare and contrast relational data representations with key-value representations. Note that we will not use these higher-level features: the NoSQL Table API (We’ll focus on the lower-level key/value API); the Avro value schema mechanism (We’ll restrict ourselves to simple string values).


3. This practical article by Re Lai, Enterprise Application Development Using Oracle NoSQL Database, is also helpful. It includes some material that we don't care about (i.e., NetBeans, UML, Avro value-handling) but the following sections are useful for the homework. Skim them now and be prepared to reference them later as needed.

	a. “Represent Key-Value Pairs” — Designing keys
	b. “CRUD” — Implementing the standard persistent data operations
	c. “Composite Keys” — Designing multi-element keys
	d. “Model Entities” — Modeling relational records in a KV store
	e. “Model Secondary Indexes” — Storing and retrieving sorted data
	f. “Model Multi-values and Relationships” — Modeling foreign key relationships